
Algorithm 1 Normalize

#################################################################################################################
Input: a perturbed differential system with a averaging order k
#################################################################################################################
    
#################################################################################################################
Output: a normal form of averaging up to order k
#################################################################################################################

Normalize := proc (P, Q, p, q, k) 

local R0, T, H, i, f, F, dX, dY; 

dX := normal(subs(x = epsilon*X, y = epsilon*Y, P+p)/epsilon); 
dY := normal(subs(x = epsilon*X, y = epsilon*Y, Q+q)/epsilon); 
R0 := normal(subs(X = r*C, Y = r*S, r*(C*dX+S*dY)/(C*dY-S*dX))); 
T := taylor(R0, epsilon = 0, k+1); 
H := expand(convert(T, polynom)); 
if verify(coeff(epsilon*H, epsilon), 0, equal) then 
for i to k do 
f[i] := coeff(H, epsilon^i); 
F[i, 1] := prem(numer(f[i]), C^2+S^2-1, C); 
F[i, 2] := prem(denom(f[i]), C^2+S^2-1, C); 
F[i] := normal(F[i, 1]/F[i, 2]); 
end do; end if; 
return subs(C = cos(theta), S = sin(theta), sum(F[j]*epsilon^j, j = 1 .. k));
end proc:


Algorithm 2 Averformula
    
#################################################################################################################
Input: a normal form of averaging up to order k
#################################################################################################################
    
#################################################################################################################
Output: a set of formulae associated to the integral equation y_k(theta,z)
#################################################################################################################

Averformula := proc (k) 

local l, m, U, V; U := 0; V := 0; 

for l to k-1 do 
for m to l do 
U := U+(Diff(F[k-l](s, z), `$`(z, m)))*IncompleteBellB(l, m, seq(y[i](s, z), i = 1 .. l-m+1))/factorial(l); 
V := V+(Diff(F[k-l], `$`(z, m)))*IncompleteBellB(l, m, seq(y[i], i = 1 .. l-m+1))/factorial(l);
end do; end do; 
return {Int(factorial(k)*(F[k](s, z)+U), s = 0 .. theta), [Int(factorial(k)*(F[k]+V), theta = 0 .. theta), Int(F[k]+V, theta = 0 .. 2*Pi)]}; 
end proc:


Algorithm 3 AverFun

#################################################################################################################
Input: a normal form of averaging up to order k
#################################################################################################################
    
#################################################################################################################
Output: an expression of the k-th order averaged function
#################################################################################################################


AverFun := proc (dr, k) 

local Averformula, h, F, A, y, f; 

Averformula := proc (k) local l, m, U, V; 

U := 0; V := 0; 
for l to k-1 do 
for m to l do 
U := U+(Diff(F[k-l](s, z), `$`(z, m)))*IncompleteBellB(l, m, seq(y[i](s, z), i = 1 .. l-m+1))/factorial(l); 
V := V+(Diff(F[k-l], `$`(z, m)))*IncompleteBellB(l, m, seq(y[i], i = 1 .. l-m+1))/factorial(l); 
end do; end do; 
return {Int(factorial(k)*(F[k](s, z)+U), s = 0 .. theta), [Int(factorial(k)*(F[k]+V), theta = 0 .. theta), Int(F[k]+V, theta = 0 .. 2*Pi)]}; 
end proc; 

for h to k do 
F[h] := subs(r = z, coeff(dr, epsilon^h)); 
A[h] := Averformula(h); 
y[h] := value(op(1, op(2, A[h]))); 
f[h] := factor(value(op(2, op(2, A[h])))); 
end do; 
return f[k] 
end proc:







